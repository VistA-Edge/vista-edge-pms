/* ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;
; Copyright Â© 2009 Edgeware Technologies (India) Pvt Ltd ;
; ;
; This source code contains the intellectual property ;
; of its copyright holder(s), and is made available ;
; under a license. If you do not know the terms of ;
; the license, please stop and do not read further. ;
; ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*/

package com.etipl.pms;

import com.etipl.pms.datalayer.InsuranceCompanyMethods;
import com.etipl.pms.entity.CodeDes;
import com.etipl.pms.entity.InsuranceCompany;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.Configurator;

/**
 *
 * @author  gmc
 */
public class InsuranceCompanyMaster extends javax.swing.JFrame {
    JFrame frame=new JFrame();
    
    /** Creates new form InsuranceCompanyMaster */
    public InsuranceCompanyMaster() {
        initComponents();
        setVisible(true);
        Configurator.enableAutoCompletion(this.cmbInsType);
        screenDisplay();        
        loadDefaultData();
    }

    private void loadDefaultData(){
        loadInsType();
        this.cmbInsType.setSelectedIndex(-1);
    }

    private void loadInsType(){
    try{
        InsuranceCompanyMethods ccm=new InsuranceCompanyMethods();        
        List<CodeDes> lstcd=new ArrayList<CodeDes>();
        lstcd=ccm.loadInsuranceType();
        
        for(int i=0;i<lstcd.size();i++){
           CodeDes cd=new CodeDes();
           cd=lstcd.get(i);
           this.cmbInsType.addItem(cd.getCode());
        }
        if(lstcd.size()>0){
            this.cmbInsType.setSelectedIndex(-1);
        }
     }catch(Exception e){e.printStackTrace();}
    }
     
    private void screenDisplay(){
    Dimension frameDimension = getSize();

		// position the topFrame
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        if (frameDimension.height > screenSize.height)
        {
		frameDimension.height = screenSize.height;
        }

        if (frameDimension.width > screenSize.width)
        {
			frameDimension.width = screenSize.width;
        }
        setLocation((screenSize.width - frameDimension.width) / 2,
				(screenSize.height - frameDimension.height) / 2);
}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        txtInsCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtAdd = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        cmbInsType = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtContPerson = new javax.swing.JTextField();
        txtPhone = new javax.swing.JFormattedTextField();
        txtFax = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel98 = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        txtZip = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabInsCompany = new javax.swing.JTable();
        btSave = new javax.swing.JButton();
        butDelete = new javax.swing.JButton();
        butReset = new javax.swing.JButton();
        butSearch = new javax.swing.JButton();
        butClose = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cmbPayment = new javax.swing.JComboBox();
        cmbAdj = new javax.swing.JComboBox();
        cmbDedutible = new javax.swing.JComboBox();
        cmbTakeBack = new javax.swing.JComboBox();
        cmbWithHold = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insurance Company ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Insurance Company"));

        jLabel91.setText("Type");

        jLabel93.setText("Code");

        jLabel97.setText("Zip");

        jLabel103.setText(" Name");

        jLabel1.setText("Address");

        jLabel3.setText("Fax");

        jLabel99.setText("Phone");

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("*");

        jLabel4.setText("Contact Person  ");

        try {
            txtPhone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPhone.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        try {
            txtFax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtFax.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel2.setText("City");

        jLabel98.setText("State");

        try {
            txtZip.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtZip.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel91)
                                    .add(jLabel93)
                                    .add(jLabel103))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 41, Short.MAX_VALUE)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(3, 3, 3)
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel10)
                                            .add(jLabel13)))
                                    .add(jLabel9))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(txtName)
                                .add(txtAdd)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .add(txtFax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(jLabel99)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(txtZip, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(jLabel2)
                                            .add(14, 14, 14)))
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(txtPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(txtCity))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(jLabel98)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(txtState, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(cmbInsType, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(txtContPerson))
                            .add(txtInsCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jLabel97)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel93)
                            .add(txtInsCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel91)
                            .add(cmbInsType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(txtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel103))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel97)
                                .add(jLabel2)
                                .add(txtZip, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(txtCity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(txtState, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel98)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtFax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(jLabel99)
                            .add(txtPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel13)))
                .add(6, 6, 6)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(txtContPerson, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Insurance Company Details"));

        tabInsCompany.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Address", "Phone", "Fax", "Type", "Contact Person"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabInsCompany.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabInsCompanyMouseClicked(evt);
            }
        });
        tabInsCompany.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabInsCompanyKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabInsCompany);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addContainerGap())
        );

        btSave.setMnemonic('a');
        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });
        btSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btSaveKeyPressed(evt);
            }
        });

        butDelete.setMnemonic('d');
        butDelete.setText("Delete");
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });
        butDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                butDeleteKeyPressed(evt);
            }
        });

        butReset.setMnemonic('r');
        butReset.setText("Reset");
        butReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butResetActionPerformed(evt);
            }
        });
        butReset.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                butResetKeyPressed(evt);
            }
        });

        butSearch.setMnemonic('e');
        butSearch.setText("Search");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });
        butSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                butSearchKeyPressed(evt);
            }
        });

        butClose.setMnemonic('c');
        butClose.setText("Close");
        butClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCloseActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Default Codes"));

        jLabel5.setText("Payment");

        jLabel6.setText("Adjustment");

        jLabel7.setText("Deductible");

        jLabel8.setText("Take Back");

        jLabel11.setText("With Hold");

        cmbPayment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "AETNA PMT", "ACCORDIA PMT", "APIPA PMT", "BCBS PMT", "CAREFIRST PMT", "CHAMPVA PMT", "CIGNA PMT", "COMMERCIAL PMT", "HMO PMT", "HUMANA PMT", "MEDICARE PMT", "MEDICAID PMT", "RAIL ROAD MEDICARE PMT", "SLIDING FEE PMT", "TRICARE PMT", "UHC PMT", "WORKER'S COMPENSATION PMT" }));

        cmbAdj.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "ACCORDIA ADJ", "AETNA ADJ", "APIPA ADJ", "BCBS ADJ", "CAREFIRST ADJ", "CHAMPVA ADJ", "CIGNA ADJ", "COMMERCIAL INSURANCE ADJ", "HMO ADJ", "HUMANA ADJ", "MEDICARE ADJ", "MEDICAID ADJ", "RAIL ROAD ADJ", "SLIDING FEE ADJ", "TRICARE ADJ", "UHC ADJ", "WORKER'S COMPENSATION ADJ" }));

        cmbDedutible.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "INSURANCE DEDUCTIBLE" }));

        cmbTakeBack.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "INSURANCE TAKEBACK" }));

        cmbWithHold.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "INSURANCE WITHHOLD" }));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11)
                    .add(jLabel8)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jLabel6)
                            .add(jLabel7))
                        .add(18, 18, 18)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbAdj, 0, 174, Short.MAX_VALUE)
                            .add(cmbPayment, 0, 174, Short.MAX_VALUE)
                            .add(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTakeBack, 0, 174, Short.MAX_VALUE)
                                    .add(cmbDedutible, 0, 174, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbWithHold, 0, 174, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(cmbPayment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(cmbAdj, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(cmbDedutible, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(cmbTakeBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(cmbWithHold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(butDelete)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(butReset)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(butSearch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(butClose)
                        .add(191, 191, 191))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butClose)
                    .add(butSearch)
                    .add(butReset)
                    .add(butDelete)
                    .add(btSave))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void showData(int rowCount,int rowSel){
        txtInsCode.setEditable(false);
        try{
            String comboSel = null;

            InsuranceCompanyMethods icm=new InsuranceCompanyMethods();
            List<InsuranceCompany> lstIC=new ArrayList<InsuranceCompany>();
            InsuranceCompany ic=new InsuranceCompany();

            if(rowCount>0){
                if(tabInsCompany.getValueAt(rowSel, 0)!=null){
                    ic.setCode(tabInsCompany.getValueAt(rowSel, 0).toString());
                }
            }

            lstIC=icm.loadCompany(ic);

            if(lstIC!=null){
                for(int i=0;i<lstIC.size();i++){
                InsuranceCompany icc=new InsuranceCompany();
                icc=lstIC.get(i);

                this.txtInsCode.setText(icc.getCode());
                this.txtName.setText(icc.getName());
                this.txtAdd.setText(icc.getAddress());
                this.txtCity.setText(icc.getCity());
                this.txtState.setText(icc.getState());
                this.txtZip.setText(icc.getCZip());
                this.txtPhone.setText(icc.getPhone());
                this.txtFax.setText(icc.getFax());


                if(icc.getType()!=null){
                    comboSel=checkCode(icc.getType().toString());
                    if(comboSel!=null){
                        this.cmbInsType.setSelectedItem(comboSel);
                    }
                }else{this.cmbInsType.setSelectedIndex(-1);   }

                this.txtContPerson.setText(icc.getContPerson());
                this.cmbPayment.setSelectedItem(icc.getPaymentCode());
                this.cmbAdj.setSelectedItem(icc.getAdjustment());
                this.cmbDedutible.setSelectedItem(icc.getDeductible());
                this.cmbTakeBack.setSelectedItem(icc.getTakeBack());
                this.cmbWithHold.setSelectedItem(icc.getWithHold());
                }
            }else{
                clearAll();
            }
             btSave.setText("Update");
        }catch(Exception e){e.printStackTrace();}

    }
    private void tabInsCompanyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabInsCompanyMouseClicked
        // TODO add your handling code here:
       int rowCount=tabInsCompany.getRowCount();
       int curRow=tabInsCompany.getSelectedRow();
       showData(rowCount,curRow);
}//GEN-LAST:event_tabInsCompanyMouseClicked


    private String checkCode(String code){
    try{
        String[] splitCode;
        String codeName = null;
        String codeCombo=null;

        if(this.cmbInsType.getItemCount()!=0){
            int items=this.cmbInsType.getItemCount();
            for(int i=0;i<items;i++){
                splitCode=this.cmbInsType.getItemAt(i).toString().split("-");
                if(splitCode.length>1){
                    codeCombo=splitCode[0].trim();
                    if(codeCombo.equalsIgnoreCase(code.trim())){
                        codeName=this.cmbInsType.getItemAt(i).toString();
                        
                        return codeName;
                    }
                }
            }
        }
        return codeName;
    }catch(Exception e){e.printStackTrace();return null;}
    }

     
    private InsuranceCompany settingInsuranceObject(){
    try{
            InsuranceCompany insCom=new InsuranceCompany();

            insCom.setCode(txtInsCode.getText().toString());

            if(cmbInsType.getSelectedIndex()!=-1){
                String[] s=cmbInsType.getSelectedItem().toString().split("-");
                insCom.setType(s[0]);
            }

            insCom.setName(txtName.getText().toString());
            insCom.setddress(txtAdd.getText().toString());
            insCom.setZip(txtZip.getText().toString().trim());
            insCom.setCity(txtCity.getText().toString());
            insCom.setState(txtState.getText().toString());

            if(txtFax.getText().compareTo("(   )   -    ")!=0){
                insCom.setFax(txtFax.getText().toString());
            }
            insCom.setContPerson(txtContPerson.getText().toString());

            if(txtPhone.getText().compareTo("(   )   -    ")!=0){
                insCom.setPhone(txtPhone.getText().toString());
            }

            if(cmbPayment.getSelectedIndex()!=-1){
                insCom.setPaymentCode(this.cmbPayment.getSelectedItem().toString());
            }

            if(this.cmbAdj.getSelectedIndex()!=-1){
                insCom.setAdjustment(this.cmbAdj.getSelectedItem().toString());
            }

            if(this.cmbDedutible.getSelectedIndex()!=-1){
                insCom.setDeductible(this.cmbDedutible.getSelectedItem().toString());
            }

            if(this.cmbTakeBack.getSelectedIndex()!=-1){
                insCom.setTakeBack(this.cmbTakeBack.getSelectedItem().toString());
            }

            if(this.cmbWithHold.getSelectedIndex()!=-1){
                insCom.setWithHold(this.cmbWithHold.getSelectedItem().toString());
            }
            
            return insCom;            
    }catch(Exception e){e.printStackTrace(); return null;}

    }
    private void saveUpdate(){
        try{

           int res=0,chk=0;
           int flag=0;

           InsuranceCompanyMethods docm=new InsuranceCompanyMethods();

            if(txtInsCode.getText().compareTo("")==0 || txtInsCode.getText().isEmpty()){
                JOptionPane.showMessageDialog(frame,"Code should not be left empty");
                this.txtInsCode.requestFocus();
                return;
            }

            if(txtName.getText().compareTo("")==0 || txtName.getText().isEmpty()){
                JOptionPane.showMessageDialog(frame,"Name should not be left empty");
                this.txtName.requestFocus();
               return;
            }

            if(cmbInsType.getSelectedIndex()==-1){
               JOptionPane.showMessageDialog(frame,"Type should not be left empty");
               this.cmbInsType.requestFocus();
               return;
            }else{

            
                    if(!btSave.getText().equalsIgnoreCase("Update")){
                         chk=docm.checkDuplicateCode(txtInsCode.getText());
                         if(chk==0){
                            res=docm.saveInsurance(settingInsuranceObject());
                            if(res==1){
                                JOptionPane.showMessageDialog(frame,"Insurance Saved Successfully ... ");
                             }
                         }else{
                                flag=1;
                                JOptionPane.showMessageDialog(frame,"Code already exists");
                        }
                    }else{
                        res=docm.updateInsurance(settingInsuranceObject());
                        if(res==1){
                            JOptionPane.showMessageDialog(frame,"Insurance Updated Successfully ... ");
                            btSave.setText("Save");
                        }
                    }
             }
               if(flag==0){
                    reset();
                    filltabInsCompany();
                }
            
            this.txtInsCode.requestFocus();
           
        }catch(Exception e){e.printStackTrace();}        
    }

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        // TODO add your handling code here:
        saveUpdate();
}//GEN-LAST:event_btSaveActionPerformed

    private void delete(){
    try{
            int chk=1;

            if(txtInsCode.getText().isEmpty() || txtInsCode.getText().equalsIgnoreCase("")){
                return;
            }
            chk=JOptionPane.showConfirmDialog(frame,"Do U want to delete the Record");
            if(chk==0){
                int res=0;
                InsuranceCompanyMethods objDel=new InsuranceCompanyMethods();
                res=objDel.deleteInsurance(txtInsCode.getText());
                if(res==1){
                    JOptionPane.showMessageDialog(frame,"Deleted Successfully");
                     reset();
                    filltabInsCompany();
                }
            }
    }catch(Exception e){e.printStackTrace();}
    txtInsCode.setEditable(true);

    }

    private void clearTabInsCompany(){

         tabInsCompany.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"Code","Name","Address","Phone","Fax","Type","Contact Person"}));
    }

    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        // TODO add your handling code here:         
             delete();       
}//GEN-LAST:event_butDeleteActionPerformed

private void reset(){
    clearAll();
    btSave.setText("Save");
}


private void butResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butResetActionPerformed
        // TODO add your handling code here:
        this.txtInsCode.setEditable(true);
        this.txtInsCode.requestFocus();
        reset();
        clearTabInsCompany();
}//GEN-LAST:event_butResetActionPerformed

    private void clearAll(){
        
            this.txtInsCode.setText("");
            this.txtAdd.setText("");
            this.txtCity.setText("");
            this.txtZip.setText("");
            this.txtPhone.setText("");
            this.cmbInsType.setSelectedIndex(-1);
            this.txtName.setText("");
            this.txtCity.setText("");
            this.txtFax.setText("");
            this.txtState.setText("");
            this.txtContPerson.setText("");
            this.cmbPayment.setSelectedIndex(-1);
            this.cmbAdj.setSelectedIndex(-1);
            this.cmbDedutible.setSelectedIndex(-1);
            this.cmbTakeBack.setSelectedIndex(-1);
            this.cmbWithHold.setSelectedIndex(-1);            
    }
    
    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        // TODO add your handling code here:
        filltabInsCompany();
        if(tabInsCompany.getRowCount()!=0){
                    tabInsCompany.changeSelection(0, 0, false, false);
                    tabInsCompany.setFocusable(true);
                    tabInsCompany.requestFocus();
        }
}//GEN-LAST:event_butSearchActionPerformed

    private void btSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btSaveKeyPressed
        // TODO add your handling code here:
         saveUpdate();
    }//GEN-LAST:event_btSaveKeyPressed

    private void butDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_butDeleteKeyPressed
        // TODO add your handling code here:
        delete();
}//GEN-LAST:event_butDeleteKeyPressed

    private void butSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_butSearchKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
             filltabInsCompany();
        }
}//GEN-LAST:event_butSearchKeyPressed

    private void butResetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_butResetKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            this.txtInsCode.setEditable(true);
             reset();
             clearTabInsCompany();
        }
}//GEN-LAST:event_butResetKeyPressed

    private void tabInsCompanyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabInsCompanyKeyPressed
        // TODO add your handling code here:
     try{
        int rowCount=tabInsCompany.getRowCount();
        int curRow=tabInsCompany.getSelectedRow();

        if(evt.getKeyCode()==evt.VK_DOWN){
            if(curRow==rowCount-1){
                    evt.setKeyCode(evt.VK_ENTER);
                    tabInsCompany.setFocusable(true);
                    tabInsCompany.requestFocus();
                    curRow=0;
            }else{
                    curRow=curRow+1;
            }
        }
        if(evt.getKeyCode()==evt.VK_UP){
            if(curRow!=0 && curRow<rowCount){
                curRow=curRow-1;
            }
        }

        if(curRow!=-1){
            showData(rowCount,curRow);
        }
        
    }catch(Exception e){e.printStackTrace();}

    }//GEN-LAST:event_tabInsCompanyKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    try{
        if(this.getDefaultCloseOperation()==MDI.defaultWindowClose){
            MDI.insMaster=null;
        }
    }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_formWindowClosed

    private void butCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_butCloseActionPerformed

    private void filltabInsCompany(){
    try{
        InsuranceCompanyMethods dm=new InsuranceCompanyMethods();

        List<InsuranceCompany> lstIC=new ArrayList<InsuranceCompany>();
        
        lstIC=dm.loadCompany(settingInsuranceObject());
        if(lstIC!=null){
            String[][] arr=new String[lstIC.size()][12];
            for(int i=0;i<lstIC.size();i++){
               InsuranceCompany ic=new InsuranceCompany();
               ic=lstIC.get(i);
               arr[i][0]=ic.getCode();
               arr[i][1]=ic.getName();
               arr[i][2]=ic.getAddress()+":"+ic.getCity()+":"+ic.getState()+":"+ic.getCZip();
               arr[i][3]=ic.getPhone();
               arr[i][4]=ic.getFax();
               arr[i][5]=ic.getType();
               arr[i][6]=ic.getContPerson();
               arr[i][7]=ic.getPaymentCode();
               arr[i][8]=ic.getAdjustment();
               arr[i][9]=ic.getDeductible();
               arr[i][10]=ic.getTakeBack();
               arr[i][11]=ic.getWithHold();
            }
        tabInsCompany.setModel(new javax.swing.table.DefaultTableModel(arr,new String[]{"Code","Name","Address","Phone","Fax","Type","Contact Person"}
        )
                   {
                       boolean[] canEdit = new boolean [] {
                              false, false,false, false,false, false,false
                       };
                       public boolean isCellEditable(int rowIndex, int columnIndex) {
                               return canEdit [columnIndex];
                       }
                       }
                    );
        }else{
            clearTabInsCompany();
        }

}catch(Exception e){e.printStackTrace();}
  }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsuranceCompanyMaster().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSave;
    private javax.swing.JButton butClose;
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butReset;
    private javax.swing.JButton butSearch;
    private javax.swing.JComboBox cmbAdj;
    private javax.swing.JComboBox cmbDedutible;
    private javax.swing.JComboBox cmbInsType;
    private javax.swing.JComboBox cmbPayment;
    private javax.swing.JComboBox cmbTakeBack;
    private javax.swing.JComboBox cmbWithHold;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabInsCompany;
    private javax.swing.JTextField txtAdd;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContPerson;
    private javax.swing.JFormattedTextField txtFax;
    private javax.swing.JTextField txtInsCode;
    private javax.swing.JTextField txtName;
    private javax.swing.JFormattedTextField txtPhone;
    private javax.swing.JTextField txtState;
    private javax.swing.JFormattedTextField txtZip;
    // End of variables declaration//GEN-END:variables
    
}
