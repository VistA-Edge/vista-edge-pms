/* ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;
; Copyright Â© 2009 Edgeware Technologies (India) Pvt Ltd ;
; ;
; This source code contains the intellectual property ;
; of its copyright holder(s), and is made available ;
; under a license. If you do not know the terms of ;
; the license, please stop and do not read further. ;
; ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*/

package com.etipl.pms;

import com.etipl.pms.datalayer.GetSystemConfig;
import com.etipl.pms.utilities.Utiles;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import org.gui.JCalendarCombo;

/**
 *
 * @author Administrator
 */
public class BasicAppointment extends javax.swing.JFrame {
    public static String newHRN="",GFNAME="";
    public Connection con=null;
    private int flag=0,flagg=0,flagNwApp=1,fgvisit=1;
    private int FLAG=0;//used to see whether the patient has appt or not
    private String[] GSlotID,GSlotID1;
    private String slotNo,slotNo1;
    Color rowcolor;
    public static String sip="", sport="",dbname="",uname="",passwd="";
    private String patFName=null;
    /** Creates new form BasicAppointment */
    public BasicAppointment() throws SQLException {
        super();
        
        initComponents();
        setVisible(true);
        screenDisplay(); 

        if(!lblHRN.getText().equalsIgnoreCase("")){
            lblStatus.setText("To book an appointment select date & Provider ...");
        }else{
            lblStatus.setText("First select the Patient ...");
        }
        connect_Setting("P");        
        clear();

        dtpApptDate.setDateFormat(JCalendarCombo.MONTH, JCalendarCombo.DAY, JCalendarCombo.YEAR_BIG, '/');
        lblHRN.setText("");
        jLabel9.setText("");
        jLabel13.setText("");
        jLabel7.setText("");
        jLabel11.setText("");
        jLabel15.setText("");
        tabPatAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date/Time","Provider","Visit No."}));
        dynamicWidthofColumnTabPatAppt();
        tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}));//,"SlotID"}));
        dynamicWidthofColumnTabProvAppt();
        cmbProvider.removeAllItems();
        
        cmbFrmtime.setSelectedIndex(0);
        
        cmbReferred.setSelectedIndex(-1);
        butBook.setText("Book");
        butSave.setText("Save");
        
        GSlotID =  new String[50];
        GSlotID1 =  new String[50];
        
        if(PatientList.globalhrn==null) {
            PatientList.globalhrn="";
        }
        
        if(!PatientList.globalhrn.equalsIgnoreCase("")) {
            searchAppointment(PatientList.globalhrn);
        }        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblHRN = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabPatAppt = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        dtpApptDate = new org.gui.JCalendarCombo();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabProvAppt = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        cmbStatus = new javax.swing.JComboBox();
        cmbReferred = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        butBook = new javax.swing.JButton();
        cmbFrmtime = new javax.swing.JComboBox();
        cmbTotime = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtComplaint = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        butSave = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        txtCheckin = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        txtCheckout = new javax.swing.JFormattedTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtEncountertime = new javax.swing.JFormattedTextField();
        jLabel28 = new javax.swing.JLabel();
        lblEncounter = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRemarks = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        cmbProvider = new javax.swing.JComboBox();
        butNewAppt = new javax.swing.JButton();
        butNewReg = new javax.swing.JButton();
        butSearch = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        slotPeriod = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Appointment");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Demographics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel4.setText("HRN :");

        jLabel6.setText("Sex :");

        jLabel8.setText("Name :");

        jLabel10.setText("DOB :");

        jLabel12.setText("Age :");

        jLabel13.setText("jLabel13");

        jLabel14.setText("Phone :");

        jLabel15.setText("jLabel15");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(lblHRN, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(55, 55, 55)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 329, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel13))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel15)))
                .add(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(lblHRN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(11, 11, 11)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(jLabel13))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel14)
                            .add(jLabel15)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        tabPatAppt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Appointment Date/Time", "Provider", "Visit No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabPatAppt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPatApptMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabPatAppt);
        tabPatAppt.getColumnModel().getColumn(0).setMinWidth(50);
        tabPatAppt.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabPatAppt.getColumnModel().getColumn(0).setMaxWidth(50);
        tabPatAppt.getColumnModel().getColumn(1).setMinWidth(200);
        tabPatAppt.getColumnModel().getColumn(1).setPreferredWidth(400);
        tabPatAppt.getColumnModel().getColumn(2).setMinWidth(200);
        tabPatAppt.getColumnModel().getColumn(2).setPreferredWidth(400);
        tabPatAppt.getColumnModel().getColumn(3).setMinWidth(50);
        tabPatAppt.getColumnModel().getColumn(3).setPreferredWidth(50);
        tabPatAppt.getColumnModel().getColumn(3).setMaxWidth(50);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Appointment Date :");

        dtpApptDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dtpApptDateMouseClicked(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Provider Booked Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Appointment Date", "From Time", "To Time", "Patient_Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabProvAppt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabProvApptMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabProvAppt);
        tabProvAppt.getColumnModel().getColumn(0).setMinWidth(50);
        tabProvAppt.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabProvAppt.getColumnModel().getColumn(0).setMaxWidth(50);
        tabProvAppt.getColumnModel().getColumn(1).setMinWidth(200);
        tabProvAppt.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabProvAppt.getColumnModel().getColumn(2).setMinWidth(100);
        tabProvAppt.getColumnModel().getColumn(2).setPreferredWidth(100);
        tabProvAppt.getColumnModel().getColumn(3).setMinWidth(100);
        tabProvAppt.getColumnModel().getColumn(3).setPreferredWidth(100);
        tabProvAppt.getColumnModel().getColumn(4).setMinWidth(200);
        tabProvAppt.getColumnModel().getColumn(4).setPreferredWidth(200);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Appointment Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel16.setText("From(HH:mm)");

        jLabel17.setText("Type :");

        jLabel18.setText("Status :");

        jLabel19.setText("Referred From:");

        jLabel21.setText("To (HH:mm)");

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New", "Established", "Shot" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Open", "Kept", "Confirmed", "NO show", "Cancelled", "Rescheduled" }));
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        jLabel22.setText("Complaint :");

        butBook.setText("Book");
        butBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBookActionPerformed(evt);
            }
        });
        butBook.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                butBookFocusLost(evt);
            }
        });
        butBook.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                butBookKeyPressed(evt);
            }
        });

        cmbFrmtime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFrmtimeActionPerformed(evt);
            }
        });
        cmbFrmtime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmbFrmtimeFocusLost(evt);
            }
        });

        txtComplaint.setColumns(2);
        txtComplaint.setLineWrap(true);
        txtComplaint.setRows(2);
        txtComplaint.setAutoscrolls(false);
        txtComplaint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtComplaintKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(txtComplaint);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(35, 35, 35)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel16)
                            .add(jLabel18)
                            .add(jLabel17)
                            .add(jLabel22)
                            .add(jLabel19))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(cmbReferred, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(cmbStatus, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(cmbType, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jPanel5Layout.createSequentialGroup()
                                    .add(cmbFrmtime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jLabel21)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(cmbTotime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(butBook)
                        .add(80, 80, 80)))
                .add(46, 46, 46))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(cmbFrmtime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21)
                    .add(cmbTotime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(cmbType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(cmbStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbReferred, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel22)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(butBook))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visit Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        butSave.setText("Save");
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });
        butSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                butSaveKeyPressed(evt);
            }
        });

        jLabel24.setText("Check-in (HH:mm)");

        try {
            txtCheckin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCheckin.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel26.setText("Check-out (HH:mm)");

        try {
            txtCheckout.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCheckout.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel25.setText("Encounter time(HH:mm)");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel20.setForeground(java.awt.Color.red);
        jLabel20.setText("* Do not enter encounter time, if encounter made through VistA ");

        try {
            txtEncountertime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtEncountertime.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel28.setText("Remarks :");

        lblEncounter.setEditable(false);

        jLabel27.setText("Encounter#");

        txtRemarks.setColumns(2);
        txtRemarks.setLineWrap(true);
        txtRemarks.setRows(2);
        txtRemarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRemarksKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(txtRemarks);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(36, 36, 36)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jLabel28)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 244, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(138, 138, 138)
                        .add(butSave))
                    .add(jLabel20)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jLabel25)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtEncountertime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel27)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblEncounter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jLabel24)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtCheckin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(10, 10, 10)
                        .add(jLabel26)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtCheckout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(txtCheckin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel26)
                    .add(txtCheckout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jLabel20)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel25)
                    .add(txtEncountertime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel27)
                    .add(lblEncounter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(butSave))
        );

        jLabel2.setText("Provider :");

        cmbProvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProviderActionPerformed(evt);
            }
        });

        butNewAppt.setText("New Appt");
        butNewAppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewApptActionPerformed(evt);
            }
        });

        butNewReg.setText("New Registration");
        butNewReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewRegActionPerformed(evt);
            }
        });

        butSearch.setText("Search Patient");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setText(" First select the Patient...");

        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setText("Slot Period :");

        slotPeriod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "05", "10", "15", "20", "30", "60" }));
        slotPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slotPeriodActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(0, 102, 255));
        jLabel5.setText("min.");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(slotPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)
                        .add(118, 118, 118)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dtpApptDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbProvider, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(9, 9, 9)
                                .add(lblStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 318, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(butSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(butNewReg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(butNewAppt)
                                .add(4, 4, 4))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(slotPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel5))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cmbProvider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel2))
                    .add(dtpApptDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblStatus)
                    .add(butSearch)
                    .add(butNewReg)
                    .add(butNewAppt))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    public String getCodeTime(String time){
        String Time;
        Time=time.substring(0,5);
        return Time;
    }

    private void screenDisplay(){
        Dimension frameDimension = getSize();

		// position the topFrame
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        if (frameDimension.height > screenSize.height)
        {
            frameDimension.height = screenSize.height;
        }

        if (frameDimension.width > screenSize.width)
        {
			frameDimension.width = screenSize.width;
        }
            setLocation((screenSize.width - frameDimension.width) / 2,
				(screenSize.height - frameDimension.height) / 2);
    }


    public String setTime1(String date,String fromtime,int a){
       String DDD="",timeDDD="";
       String hr="",min="";
       hr=fromtime.substring(0,2);
       min=fromtime.substring(3,5);
       int y01=0,y02=0;
       y01 = Integer.parseInt(hr);
       y02 = Integer.parseInt(min)+a*10;
       timeDDD=""+y01+":"+y02;
       DDD=setTime(date,timeDDD);
       
        return DDD;
    }


    public String setTime(String date,String time){        
    String Time;
    String Day,Month,Year;
    int j=date.length();
    
    if(j==8)
    {
     Day=date.substring(2,3);
     Month=date.substring(0,1);
     Year=date.substring(4,8);
     Time=Year+"-0"+Month+"-0"+Day+" "+time+":00";     
    }else
        if(j==9)
        {
            if(date.substring(1,2).compareTo("/")==0)
           {
            Day=date.substring(2,4);
            Month=date.substring(0,1);
            Year=date.substring(5,9);
            Time=Year+"-0"+Month+"-"+Day.replace("/","")+" "+time+":00";           
           }else{
                Day=date.substring(3,4);
                Month=date.substring(0,2);
                Year=date.substring(5,9);
                Time=Year+"-"+Month+"-0"+Day.replace("/","")+" "+time+":00";             
           }
        }
        else{
            Day=date.substring(3,5);
            Month=date.substring(0,2);
            Year=date.substring(6,10);
            Time=Year+'-'+Month+'-'+Day+" "+time+":00";            
        }

    return Time;
    }

    public int setVisitSlotNo(String time0,String time1){
       String a01="",a02="",a11="",a12="";
       
       a01=time0.substring(0,2);
       a02=time0.substring(3,5);

       a11=time1.substring(0,2);
       a12=time1.substring(3,5);

       int y01=0,y02=0,y11=0,y12=0,hr=0,min=0,tot=0,nvalue=0;
       y01 = Integer.parseInt(a01);
       y02 = Integer.parseInt(a02);
       y11 = Integer.parseInt(a11);
       y12 = Integer.parseInt(a12);
       
       hr=(y11-y01)*60;
       min=y12-y02;
       tot=hr+min;
       
       if(tot%10==0)
       {
           nvalue=tot/10;
       }
       
       return tot;
    }

    public String getDOB(String date){
        String Day,Month,Year,Date;
        Day=date.substring(8,10);
        Month=date.substring(5,7);
        Year=date.substring(0,4);
        Date=Month+'/'+Day+'/'+Year;
        
        return Date;
    }

    public String setDate(String date){

    String Day,Month,Year,Date;
    int j=date.length();
    
    if(j==8)
    {
     Day=date.substring(2,3);
     Month=date.substring(0,1);
     Year=date.substring(4,8);
     Date=Year+"-0"+Month+"-0"+Day.replace("/","")+" 00:00:00";
     
    }else
        if(j==9)
        {
           if(date.substring(1,2).compareTo("/")==0)
           {
            Day=date.substring(2,4);
            Month=date.substring(0,1);
            Year=date.substring(5,9);
            Date=Year+"-0"+Month+"-"+Day.replace("/","")+" 00:00:00";
           
           }else{
                Day=date.substring(3,4);
                Month=date.substring(0,2);
                Year=date.substring(5,9);
                Date=Year+"-"+Month+"-0"+Day.replace("/","")+" 00:00:00";              
           }
        }
        else{
            Day=date.substring(3,5);
            Month=date.substring(0,2);
            Year=date.substring(6,10);
            Date=Year+'-'+Month+'-'+Day.replace("/","")+" 00:00:00";           
        }
    
    return Date;
    }


    public String getDate1(String date){
        String Day;
        Day=date.substring(8,10);

        return Day;
    }

    public String getMonth(String date){
        String Month;
        Month=date.substring(5,7);

        return Month;
    }

    public String getYear(String date){
        String Year;
        Year=date.substring(0,4);

        return Year;
    }

    public String getDate1(String date,char ch){
        String Day;
        Day=date.substring(0,2);

        return Day;
    }

    public String getMonth(String date,char ch){
        String Month;
        Month=date.substring(3,5);

        return Month;
    }

    public String getYear(String date,char ch){
        String Year;
        Year=date.substring(6);
        
        return Year;
    }

private void apptEncountStatus(){    
        if(butBook.getText().compareTo("Book")==0){
            cmbFrmtime.requestFocus();
            lblStatus.setText("Enter the Appointment Details and Book");
        }else{
            lblStatus.setText("");
        }
}

private void cmbProviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProviderActionPerformed
        // TODO add your handling code here:
        String a="",b="";
        int j=0;
        String slotperiod1="";
        slotperiod1=slotPeriod.getSelectedItem().toString();
        clear();
        slotPeriod.setSelectedItem(slotperiod1);
        cmbFrmtime.setEnabled(true);
        cmbTotime.setEnabled(true);
        this.butBook.setText("Book");
        this.butSave.setText("Save");
        tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}));//,"SlotID"}));
        dynamicWidthofColumnTabProvAppt();        
        ResultSet resultSet1 = null;
        Statement statement = null;

        try{
      
            Class.forName("com.mysql.jdbc.Driver").newInstance();            
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();
            cmbReferred.removeAllItems();
            String sqlstring1 = " SELECT * from DOCTOR ";        
            resultSet1=statement.executeQuery(sqlstring1);
           
         while(resultSet1.next()){          
              cmbReferred.insertItemAt(resultSet1.getString("DOCTOR_NAME"),j++);
            }
           }catch (Exception e){e.printStackTrace();
           System.err.println ("Cannot connect to database server");  }

        try
        {
        a=cmbProvider.getSelectedItem().toString();
        b=dtpApptDate.getSelectedDate();
        showData1(a,b);
        
        }catch(Exception e){}
        
        flagNwApp=1;
        fgvisit=1;       
        apptEncountStatus();
       
}//GEN-LAST:event_cmbProviderActionPerformed

private void insertFromTotime(int slotperiod,int flag){
    int a=0,b=0,i=0,j=0;    
    cmbTotime.removeAllItems();
    for(i=8;i<20;i++)
    {
        for(j=0;j<60;j=j+slotperiod)
        {
            if(i<10){
                
                if(j<10){
                    cmbFrmtime.insertItemAt("0"+i+":0"+j,a++);
                    cmbTotime.insertItemAt("0"+i+":0"+j,b++);
                }else{
                    cmbFrmtime.insertItemAt("0"+i+":"+j,a++);
                    cmbTotime.insertItemAt("0"+i+":"+j,b++);
                }                
            }else{                
                if(j<10){
                    cmbFrmtime.insertItemAt(i+":0"+j,a++);
                    cmbTotime.insertItemAt(i+":0"+j,b++);
                }else{
                    cmbFrmtime.insertItemAt(i+":"+j,a++);
                    cmbTotime.insertItemAt(i+":"+j,b++);
                }                
            }
        }
    }

    cmbTotime.insertItemAt("20:00",b++);
}

private String insertToAccFrom(String frmtime){
    int a=0,b=0,imin=0;
    String totime="",hr="",min="";
    String [] temp = null;
    temp = frmtime.split(":");
    hr=temp[0];
    min=temp[1];
    imin=Integer.parseInt(min)+Integer.parseInt(slotPeriod.getSelectedItem().toString());
    
    if(imin<10){
    totime=hr+":0"+imin;
    }else{
        if(imin!=60){
            totime=hr+":"+imin;
        }else{
            hr=""+(Integer.parseInt(hr)+1);
            if(hr.length()==1){
                totime="0"+hr+":00";
            }else{
                totime=hr+":00";
            }
        }
    }
    
    return totime;
}


    public void showData1(String a,String b) throws SQLException
    {      
        String ress="",res="";
        String date,totime,frmtime,sqlstring;
        int j=0;
        ResultSet resultSet = null;
        Statement statement = null;
        
        int k = 0;        
        try{
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();            
            ress=b;            
            
            sqlstring = "select * from AVAILABILITY a,SLOT b,DOCTOR c,JP_PAT_INFO e" +
                    " where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and  b.patient_code=e.HRN and " +
                    "c.DOCTOR_CODE=a.DOCTOR_CODE and c.DOCTOR_NAME='"+a+"' and a.DATE= '"+setDate(ress)+"' " +
                    "and b.STATUS not in ('Cancelled','Rescheduled') order by b.TO_TIME  ;";
            
           resultSet=statement.executeQuery(sqlstring);
            
            int rowCount=0;
            while(resultSet.next()){
                rowCount++;
            }
            String[][] m = new String[rowCount][5];
            
            if(rowCount>0){
                resultSet.first();
                do{
                  date=getDate(resultSet.getString("a.DATE"));
                  totime=getTime(resultSet.getString("b.TO_TIME"));
                  frmtime=getTime(resultSet.getString("b.FROM_TIME"));

                    m[k][0] = ""+(k+1);
                    m[k][1] = Utiles.convertMysqlDatetoUSFormat(date);
                    m[k][2] = frmtime;
                    m[k][3] = totime;
                    m[k][4] = resultSet.getString("FNAME")+" "+resultSet.getString("LNAME");
                    
                    GSlotID1[k]=resultSet.getString("SLOT_ID");
                    
                    res=res+"\t"+m[k][1]+"\t"+m[k][2]+m[k][3]+"\t"+m[k][4]+GSlotID1[k]+"\n";
                  
                    k++;
                  }while(resultSet.next());
            }
              if(res.compareTo("")==0)
              {
                  flag=1;
                  butBook.setText("Book");
                  butSave.setText("Save");
                  tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}));//,"SlotID"}));
                  dynamicWidthofColumnTabProvAppt();
              }else{
                    //tabProvAppt
                    tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(m,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}//,"SlotID"}));
                    )
                    {
                       boolean[] canEdit = new boolean [] {
                              false, false,false, false,false
                       };
                    @Override
                       public boolean isCellEditable(int rowIndex, int columnIndex) {
                               return canEdit [columnIndex];
                       }
                       }
                    );
                    dynamicWidthofColumnTabProvAppt();                    
              }
        }catch (Exception e){e.printStackTrace();}
        finally{
            if(resultSet!=null){resultSet.close();}
            if(statement!=null){statement.close();}
            if(con!=null){con.close();}
        }
    }

    public int checkTime(String time1,String time2,String operator) throws SQLException{
        ResultSet resultSet = null;
        Statement statement = null;
        int dt=0;
        try{            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            String url = "jdbc:mysql:///"+dbname;
            
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            String sqlstring = "select '"+time1+"' "+operator+" '"+time2+"' as dt ;";            
            resultSet=statement.executeQuery(sqlstring);

            while(resultSet.next())
            {
              dt=resultSet.getInt("dt");             
            }
            
            return dt;
        }catch (Exception e){
           e.printStackTrace();           
           return 0;
        }finally{
            if(resultSet!=null){resultSet.close();}
            if(statement!=null){statement.close();}
            if(con!=null){con.close();}
        }
    }

    public void setFrmToTime(String a,String b) throws SQLException{
        String ress="";
        int j=0;
        ResultSet resultSet = null;
        Statement statement = null;
        try{
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            String url = "jdbc:mysql:///"+dbname;
            
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            ress=b;
           
            String sqlstring = "select distinct Time(b.TO_TIME) from AVAILABILITY a,SLOT b,DOCTOR c " +
                    " where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and " +
                    "c.DOCTOR_CODE=a.DOCTOR_CODE and c.DOCTOR_NAME='"+a+"' and a.DATE= '"+setDate(ress)+"' " +
                    "and b.STATUS not in ('Cancelled','Rescheduled') order by b.FROM_TIME  ;";
           
             resultSet=statement.executeQuery(sqlstring);

            int count=0;
             while(resultSet.next()){
                    count++;
            }
//for searching value in availability n slot table:-
            resultSet.first();
            int i=0;
            String [] arr1 = new String[count];
            if(count>0){
              do{                
                arr1[i]=resultSet.getString("Time(b.TO_TIME)");                
                i++;
              }while(resultSet.next());
            }
            
        }catch (Exception e){
           e.printStackTrace();           
        }finally{
            if(resultSet!=null){resultSet.close();}
            if(statement!=null){statement.close();}
            if(con!=null){con.close();}
        }
    }

   public String getDate(String date){
        String Day;
        Day=date.substring(0,10);
        return Day;
    }

    public String getTime(String time){
        String Time;
        Time=time.substring(11,19);
        return Time;
    }

    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        // TODO add your handling code here:        
        if(MDI.searchCriteria==null){
            fgvisit=1;
            flagNwApp=1;
            MDI.searchCriteria=new SearchCriteria();
            PatientList.whichForm = PatientList.sAppt;
            this.dispose();
        }        
}//GEN-LAST:event_butSearchActionPerformed
    private void searchAppointment(String HRN) throws SQLException {
        clear();
        lblHRN.setText("");
        jLabel9.setText("");
        jLabel13.setText("");
        jLabel7.setText("");
        jLabel11.setText("");
        jLabel15.setText("");
        tabPatAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date/Time","Provider","Visit No."}));
        dynamicWidthofColumnTabPatAppt();
        tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}));//,"SlotID"}));
        dynamicWidthofColumnTabProvAppt();
        cmbProvider.removeAllItems();
        cmbReferred.removeAllItems();

        ResultSet resultSet = null, resultSet1 = null;
        Statement statement = null;
        int i=0,j=0;
        String sd="",DOB="";
        
        try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            String url = "jdbc:mysql:///"+dbname;
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            String sqlstring = "select * from JP_PAT_INFO where HRN = '"+HRN+"' ;";
            resultSet=statement.executeQuery(sqlstring);

            while(resultSet.next()){
              lblHRN.setText(resultSet.getString("HRN"));
              jLabel9.setText(resultSet.getString("FNAME")+" "+resultSet.getString("LNAME"));
              patFName=resultSet.getString("FNAME");
              jLabel13.setText(resultSet.getString("AGE"));
              jLabel7.setText(resultSet.getString("SEX"));
              DOB=resultSet.getString("DOB");
              jLabel11.setText(getDOB(DOB));
              jLabel15.setText(resultSet.getString("PHONE"));
            }

            String sqlstring1 = " SELECT * from DOCTOR ";
            resultSet1=statement.executeQuery(sqlstring1);
            cmbProvider.removeAllItems();
            cmbReferred.removeAllItems();
            
            while(resultSet1.next()){
              cmbProvider.insertItemAt(resultSet1.getString("DOCTOR_NAME"),i++);              
            }

            sd=lblHRN.getText().toString();
            if(sd.compareTo("")==0){
                JOptionPane.showMessageDialog(null, "NO PATIENT EXISTS");
            }else{
                showData(lblHRN.getText());
                lblStatus.setText("To book an appointment select date & Provider ...");
            }
        }catch (Exception e){
           e.printStackTrace();
         }finally{
            if(resultSet!=null){resultSet.close();}
            if(statement!=null){statement.close();}
            if(con!=null){con.close();}
        }
    }
    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusGained

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cmbTypeActionPerformed

    private void dtpApptDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dtpApptDateMouseClicked
        // TODO add your handling code here:
       
}//GEN-LAST:event_dtpApptDateMouseClicked

    private void tabProvApptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabProvApptMouseClicked
        // TODO add your handling code here:
        clear();
        cmbFrmtime.setEnabled(false);
        cmbTotime.setEnabled(false);
        flagNwApp=0;//this is for a absolute new appointment where appt for that doc or patient exists
       
        int i=tabProvAppt.getSelectedRow();
        String FNAME,flname="",SlotID;
        try{
        flname=tabProvAppt.getValueAt(i,4).toString();
        }catch(Exception e){}
        
        String [] temp = null;
        temp = flname.split(" ");
        FNAME=temp[0];
      
        GFNAME=FNAME; 
        SlotID=GSlotID1[i];
        slotNo=GSlotID1[i];
       
        ResultSet resultSet = null,resultSet1=null,resultSetd=null;
        Statement statement = null;

        int k=0,j=0,force=0,forc=0,l=0;
        
        try{
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            String url = "jdbc:mysql:///"+dbname;
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();
           
            String sqlstring1 = " SELECT * from DOCTOR ";            
            resultSet1=statement.executeQuery(sqlstring1);
            
            while(resultSet1.next()){              
              cmbReferred.insertItemAt(resultSet1.getString("DOCTOR_NAME"),j++);
            }
 
            String sqlstring = "select * from AVAILABILITY a,SLOT b,DOCTOR c,JP_PAT_INFO e where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code=e.HRN and c.DOCTOR_NAME='"+cmbProvider.getSelectedItem()+"' and e.FNAME='"+FNAME+"' and b.SLOT_ID= '"+SlotID+"';";
                      
            resultSet=statement.executeQuery(sqlstring);
            int count=0;
             while(resultSet.next()){
                    count++;
            }
//for searching value in availability n slot table:-         
         if(count>0){
           resultSet.first();
           do{
               forc++;
               flag=0;

              String String1,String2,hr="",slotPeriod="";
              String1=getCodeTime(getTime(resultSet.getString("b.TO_TIME")));
              String2=getCodeTime(getTime(resultSet.getString("b.FROM_TIME")));
              slotPeriod=resultSet.getString("a.SLOT_SIZE");
              
              this.slotPeriod.setSelectedItem(slotPeriod);
              cmbFrmtime.setSelectedItem(String2);
              cmbTotime.setSelectedItem(String1);
              
              cmbType.setSelectedItem(resultSet.getString("b.BOOKING_TYPE"));
              cmbStatus.setSelectedItem(resultSet.getString("b.STATUS"));
              cmbReferred.setSelectedItem(resultSet.getString("b.REFERRED_FROM"));
              txtComplaint.setText(resultSet.getString("b.REMARKS"));
              butBook.setText("Update");
              flagg=0;
           }while(resultSet.next());
        }

//for searching value in visit table:-
            String sqlstringd = "select * from AVAILABILITY a,SLOT b,DOCTOR c,VISIT d,JP_PAT_INFO e where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and d.APPOINTMENT_ID=b.SLOT_ID and c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code=e.HRN and c.DOCTOR_NAME='"+cmbProvider.getSelectedItem()+"' and e.FNAME='"+FNAME+"' and b.SLOT_ID= '"+SlotID+"';";
            
            resultSetd=statement.executeQuery(sqlstringd);
            count=0;
            while(resultSetd.next()){
                    count++;
            }
         resultSetd.first();
         if(count>0){
           do{
               force++;
              flag=0;

              String String3,String4,String5;
              String3=getCodeTime(getTime(resultSetd.getString("d.ARRIVAL_TIME")));

              if(resultSetd.getString("d.SEEN_TIME")!=null){
              String4=getCodeTime(getTime(resultSetd.getString("d.SEEN_TIME")));
              txtEncountertime.setText(String4);
              }

              String5=getCodeTime(getTime(resultSetd.getString("d.END_TIME")));              
              lblEncounter.setText(resultSetd.getString("d.VISITNO"));
              txtCheckin.setText(String3);
              
              txtCheckout.setText(String5);
              txtRemarks.setText(resultSetd.getString("d.REMARKS"));
              butSave.setText("Update");
              fgvisit=0;
              }while(resultSetd.next());
        }
        if(forc!=0){
            if(force==0)
            {                           
              
              butSave.setText("Save");
              txtCheckin.requestFocus();
              flag=1;
              flagg=1;
              fgvisit=1;              
            }
        }else{
             int selectedrow=0;
             selectedrow=tabProvAppt.getSelectedRow();             
             if(selectedrow!=0){                 
                 cmbFrmtime.setSelectedItem(tabProvAppt.getValueAt((selectedrow-1),3).toString().substring(0,5));
             }else{
                 cmbFrmtime.setSelectedIndex(0);
             }
             
             butBook.setText("Book");
             butSave.setText("Save");
             cmbFrmtime.setEnabled(true);
             cmbTotime.setEnabled(true);
             cmbFrmtime.requestFocus();             
        }

        }catch (Exception e){e.printStackTrace(); }
        finally{
            try{
                if(resultSet!=null){resultSet.close();}
                if(resultSet1!=null){resultSet1.close();}
                if(statement!=null){statement.close();}
                if(con!=null){con.close();}
            }catch(Exception e){e.printStackTrace();}
        }
}//GEN-LAST:event_tabProvApptMouseClicked

    private void butBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBookActionPerformed
        // TODO add your handling code here:
    try{
        saveBook();
    }catch(Exception e){e.printStackTrace();}
}//GEN-LAST:event_butBookActionPerformed

    private void saveBook() throws SQLException{
      
        JFrame frame1 = new JFrame();
        int dd=2,dd1=2,dd2=2,re=3;
        String y0="";
        
        ResultSet rs = null,rs1=null;
        Statement stm = null;
            
            y0=cmbFrmtime.getSelectedItem().toString();

            try{
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();           
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            stm = con.createStatement();

            String sqlQuery0="SELECT '"+setTime(dtpApptDate.getSelectedDate(),y0)+"' < NOW() as dd;";
           
            rs=stm.executeQuery(sqlQuery0);
              while(rs.next()){
                dd=rs.getInt("dd");
               }

            String x1="",y1="",y2="";
            x1=dtpApptDate.getSelectedDate();
            y1=cmbFrmtime.getSelectedItem().toString();
            y2=cmbTotime.getSelectedItem().toString();
            String sqlQuery01="select count(*) as dd1 from AVAILABILITY a,SLOT b,DOCTOR c where "+
                    "b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and c.DOCTOR_CODE=a.DOCTOR_CODE and DATE ='"+setDate(x1)+"' and   DOCTOR_NAME ='"+cmbProvider.getSelectedItem()+"' and" +
                    " b.STATUS not in ('Cancelled','Rescheduled') and (('"+setTime(x1,y1)+"' >= b.FROM_TIME and '"+setTime(x1,y1)+"' < b.TO_TIME ) "+
                    "or('"+setTime(x1,y2)+"' > b.FROM_TIME and '"+setTime(x1,y2)+"' <= b.TO_TIME ) "+
                    "or (b.FROM_TIME >= '"+setTime(x1,y1)+"' and b.FROM_TIME < '"+setTime(x1,y2)+"')) ;";
            
            rs1=stm.executeQuery(sqlQuery01);

            while(rs1.next()){
                dd1=rs1.getInt("dd1");              
            }
 //For Appt already exist for same Doctor, same Patient and same Time!!

            sqlQuery01="select count(*) as dd2 from AVAILABILITY a,SLOT b,DOCTOR c where "+
                    "b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and c.DOCTOR_CODE=a.DOCTOR_CODE and DATE ='"+setDate(x1)+"' and   DOCTOR_NAME ='"+cmbProvider.getSelectedItem()+"' and" +
                    " b.STATUS not in ('Cancelled','Rescheduled') and b.PATIENT_CODE = '"+lblHRN.getText()+"' and " +
                    "(('"+setTime(x1,y1)+"' >= b.FROM_TIME and '"+setTime(x1,y1)+"' < b.TO_TIME ) "+
                    "or('"+setTime(x1,y2)+"' > b.FROM_TIME and '"+setTime(x1,y2)+"' <= b.TO_TIME ) "+
                    "or (b.FROM_TIME >= '"+setTime(x1,y1)+"' and b.FROM_TIME < '"+setTime(x1,y2)+"')) ;";
            
            rs1=stm.executeQuery(sqlQuery01);

            while(rs1.next()){
                dd2=rs1.getInt("dd2");              
            }

//For to time > from time
            sqlQuery01="select '"+y1+"' < '"+y2+"' as re ;";          
            rs1=stm.executeQuery(sqlQuery01);

            while(rs1.next()){
                re=rs1.getInt("re");             
            }

            }catch (Exception e){
             e.printStackTrace();            
            }finally{
                if(rs!=null){rs.close();}
                if(rs1!=null){rs1.close();}
                if(stm!=null){stm.close();}
                if(con!=null){con.close();}
            }

//for passed date (end) and time range (end)

     try{
        if(butBook.getText().compareTo("Book")==0)
        {
            if(dd==0){
               if(re==1){
                   if(dd2==0){
                      if(dd1==0){

                            saveBook1();
                            txtCheckin.requestFocus();
                            
                      }else{
                            int chk=1;
                            chk=JOptionPane.showConfirmDialog(frame1,"Appointment Already exists,\n Do you still want to continue");
                            if(chk==0){
                                saveBook1();
                                txtCheckin.requestFocus();
                            }
                      }
                   }else{JOptionPane.showMessageDialog(frame1, "Appt already exist for same Doctor, same Patient and same Time!! ");}
          }else{JOptionPane.showMessageDialog(frame1, "To Time Cannot be less than From Time!! ");}
       }else{JOptionPane.showMessageDialog(frame1, "Appointment can be created only for the future");dtpApptDate.requestFocus();}


        }else{
 //  ===========UPDATE============
             
            Statement statement = null;
            ResultSet resultSet = null,resultSet1=null;
            
            String auc="";
            JFrame frame = new JFrame();            
     
        String sn="";
        try{
               if(sn.compareTo("")==0){
               sn=slotNo1;
            }
        }catch(Exception e){  sn=slotNo1; }
       
            try{
                
                Class.forName("com.mysql.jdbc.Driver").newInstance();               
                con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
                statement = con.createStatement();

                //Searching Available_unique_code for updating Availability
                String sqlQuery0="select * from AVAILABILITY a,SLOT b where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and b.SLOT_ID= '"+sn+"';";
                resultSet=statement.executeQuery(sqlQuery0);
                while(resultSet.next()){
                    auc=resultSet.getString("AVAILABLE_UNIQUE_CODE");
                }
                
                String x1="",y1="",y2="";
                x1=dtpApptDate.getSelectedDate();
                y1=cmbFrmtime.getSelectedItem().toString();
                y2=cmbTotime.getSelectedItem().toString();
                int n=0;
                
                n=Integer.parseInt(slotPeriod.getSelectedItem().toString());

//updating Availability
                
                String updateQuery = "update AVAILABILITY set DATE= '"+setTime(dtpApptDate.getSelectedDate(),"00:00")+"' ,FROM_TIME = '"+setTime(dtpApptDate.getSelectedDate(),"06:00")+"' ,TO_TIME = '"+setTime(dtpApptDate.getSelectedDate(),"21:00")+"' ,SLOT_SIZE = '"+n+"' where AVAILABLE_UNIQUE_CODE= '"+auc+"' ; ";
                statement.executeUpdate(updateQuery);
           
//updating Slot
                if(cmbStatus.getSelectedItem().toString().compareTo("Cancelled")==0){
                    String updateQuery1 = "update SLOT set FROM_TIME= '" + setTime(x1,y1) + "'" +" ,TO_TIME= "+ "'" + setTime(x1,y2) + "'"+" ,REMARKS= "+ "'" + txtComplaint.getText() + "'"+" ,STATUS= " + "'" + cmbStatus.getSelectedItem() + "'" +" ,BOOKING_TYPE= '" +cmbType.getSelectedItem()+"'"+" ,REFERRED_FROM= '" +cmbReferred.getSelectedItem()+"',CANCELDATETIME=Now(),MDATETIME='"+"9999-12-31 23:59:59"+"'"+" where SLOT_ID= '"+sn+"';";
                   // -------update cancel--------
                    statement.executeUpdate(updateQuery1);
                }else{
                    String updateQuery1 = "update SLOT set FROM_TIME= '" + setTime(x1,y1) + "'" +" ,TO_TIME= "+ "'" + setTime(x1,y2) + "'"+" ,REMARKS= "+ "'" + txtComplaint.getText() + "'"+" ,STATUS= " + "'" + cmbStatus.getSelectedItem() + "'" +" ,BOOKING_TYPE= '" +cmbType.getSelectedItem()+"'"+" ,REFERRED_FROM= '" +cmbReferred.getSelectedItem()+"' where SLOT_ID= '"+sn+"';";
                  // -------update--------
                    statement.executeUpdate(updateQuery1);
                }

                JOptionPane.showMessageDialog(frame, "Patient Booking Updated");
                
                int j2=0;
//for cancel procedure
                if(cmbStatus.getSelectedItem().toString().compareTo("Cancelled")==0){
                    clear();
                    String sqlstring1 = " SELECT * from DOCTOR ";
                    resultSet1=statement.executeQuery(sqlstring1);

                    while(resultSet1.next()){
                        cmbReferred.insertItemAt(resultSet1.getString("DOCTOR_NAME"),j2++);
                    }
                    cmbFrmtime.setEnabled(true);
                    cmbTotime.setEnabled(true);
                    butBook.setText("Book");
  //Making flagNwApp and fgvisit=1 for booking appnt at the same time when it is "CANCELLED"
                    flagg=0;
                    flagNwApp=1;
                    fgvisit=1;
                    FLAG=0;
                }

                 if(cmbStatus.getSelectedItem().toString().compareTo("Rescheduled")==0){
                        saveBook1();
                        clear();
                        cmbFrmtime.setEnabled(true);
                        cmbTotime.setEnabled(true);
                        butBook.setText("Book");
                        butSave.setText("Save");
   // Making flagNwApp and fgvisit=1 for booking appnt at the same time when it is "CANCELLED"
                        flagg=0;
                        flagNwApp=1;
                        fgvisit=1;
                        FLAG=0;
                 }
                }catch (Exception e){   e.printStackTrace(); }
                finally{
                    if(statement!=null){statement.close();}
                    if(con!=null){con.close();}
                }
        }
   }catch(Exception e){
            JOptionPane.showMessageDialog(frame1, "Select Doctor first");
   }
        String a="",b="";
        a=cmbProvider.getSelectedItem().toString();
        b=dtpApptDate.getSelectedDate();

        showData1(a,b);
        showData(lblHRN.getText());
    }

    private void dynamicWidthofColumnTabPatAppt(){

               TableColumn tc;
               tc = tabPatAppt.getColumnModel().getColumn(0);
               tc.setPreferredWidth(50);
               tc.setMinWidth(50);
               tc.setMaxWidth(WIDTH);

               tc = tabPatAppt.getColumnModel().getColumn(1);
               tc.setPreferredWidth(310);
               tc.setMinWidth(310);
               tc.setMaxWidth(WIDTH);

               tc = tabPatAppt.getColumnModel().getColumn(2);
               tc.setPreferredWidth(310);
               tc.setMinWidth(310);
               tc.setMaxWidth(WIDTH);

               tc = tabPatAppt.getColumnModel().getColumn(3);
               tc.setPreferredWidth(157);
               tc.setMinWidth(157);
               tc.setMaxWidth(WIDTH);
    }


    private void dynamicWidthofColumnTabProvAppt(){

               TableColumn tc;
               tc = tabProvAppt.getColumnModel().getColumn(0);
               tc.setPreferredWidth(50);
               tc.setMinWidth(50);
               tc.setMaxWidth(WIDTH);

               tc = tabProvAppt.getColumnModel().getColumn(1);
               tc.setPreferredWidth(400);
               tc.setMinWidth(200);
               tc.setMaxWidth(WIDTH);

               tc = tabProvAppt.getColumnModel().getColumn(2);
               tc.setPreferredWidth(100);
               tc.setMinWidth(200);
               tc.setMaxWidth(WIDTH);

               tc = tabProvAppt.getColumnModel().getColumn(3);
               tc.setPreferredWidth(100);
               tc.setMinWidth(200);
               tc.setMaxWidth(WIDTH);
               
               tc = tabProvAppt.getColumnModel().getColumn(4);
               tc.setPreferredWidth(200);
               tc.setMinWidth(200);
               tc.setMaxWidth(WIDTH);
    }


    private void saveBook1() throws SQLException{
       
            ResultSet resultSet = null,resultSet1=null,resultSet11=null,resultSet22=null,resultSetw=null;
            Statement statement = null;
            JFrame frame = new JFrame();
            int dv0=0,dv01=0,q=0,aaa=0;
            String dc="",a1="";

            try{
            
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            String sqlQuery0="select MAX(CAST(AVAILABLE_UNIQUE_CODE AS UNSIGNED)) as dv from AVAILABILITY";
            resultSet=statement.executeQuery(sqlQuery0);
            while(resultSet.next()){
                dv0=resultSet.getInt("dv")+1;
            }

            String sqlQuery01="select * from DOCTOR where DOCTOR_NAME= '"+cmbProvider.getSelectedItem()+"' ;";
            resultSet1=statement.executeQuery(sqlQuery01);

            while(resultSet1.next()){
                dc=resultSet1.getString("DOCTOR_CODE");
            }

            String x1="",y1="",y2="";

            x1=dtpApptDate.getSelectedDate();
            dtpApptDate.getSelectedDate();

            String sqlQuery11="select max(SLOT_NO) as dfg from AVAILABILITY a,SLOT b,DOCTOR c,JP_PAT_INFO e where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code=e.HRN and c.DOCTOR_NAME='"+cmbProvider.getSelectedItem()+"' and a.DATE= '"+setDate(dtpApptDate.getSelectedDate())+"'";
            resultSet11=statement.executeQuery(sqlQuery11);

            while(resultSet11.next()){
                dv01=resultSet11.getInt("dfg")+1;
            }

            String sqlQuery22="select max(SLOT_ID) as aaa from SLOT ;";
            resultSet22=statement.executeQuery(sqlQuery22);

            while(resultSet22.next()){
                aaa=resultSet22.getInt("aaa")+1;
            }

            y1=cmbFrmtime.getSelectedItem().toString();
            y2=cmbTotime.getSelectedItem().toString();

            int n=0;
            n=Integer.parseInt(slotPeriod.getSelectedItem().toString());
 
                String sqlQuery = "insert into AVAILABILITY(AVAILABLE_UNIQUE_CODE,DOCTOR_CODE,DATE,FROM_TIME,TO_TIME,SLOT_SIZE,OVERBOOKING,STATUS) values ('"+dv0+"','"+dc+"','"+setDate(x1)+"','"+setTime(x1,"06:00")+"','"+setTime(x1,"21:00")+"','"+n+"','0','A')";
               
                statement.executeUpdate(sqlQuery);

                if(cmbStatus.getSelectedItem().toString().compareTo("Rescheduled")==0){
                    a1="Open";
                }else{
                    a1=cmbStatus.getSelectedItem().toString();
                }
 
                 String sqlQuery1 = "insert into SLOT (SLOT_ID,SLOT_NO,FROM_TIME,TO_TIME,PATIENT_CODE,REMARKS,AVAILABLE_CODE,STATUS,BOOKING_TYPE,ENTRY_TIME,REFERRED_FROM,MDATETIME) values('"+aaa+"','"+dv01+"','"+setTime(x1,y1)+"','"+setTime(x1,y2)+"','"+lblHRN.getText()+"','"+txtComplaint.getText()+"','"+dv0+"','"+a1+"','"+cmbType.getSelectedItem()+"',NOW(),'"+cmbReferred.getSelectedItem()+"','9999-12-31 23:59:59')";
               
                statement.executeUpdate(sqlQuery1);
                slotNo1=""+aaa;
                JOptionPane.showMessageDialog(frame, "Patient appointment booked");
                lblStatus.setText("");
                //-------Patient booked:entry into appt n slot tables--------
                cmbFrmtime.setEnabled(false);
                cmbTotime.setEnabled(false);
                butBook.setText("Update");
                // Making flagg,flagNwApp,FLAG all =0 for updating the book appnt at the same time when it is made
                flagg=0;
                flagNwApp=0;
                FLAG=0;
            
            }catch (Exception e){ e.printStackTrace(); }
            finally{
                if(resultSet!=null){resultSet.close();}
                if(resultSet1!=null){resultSet1.close();}
                if(resultSet11!=null){resultSet11.close();}
                if(statement!=null){statement.close();}
                if(con!=null){con.close();}
            }
    }

    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed
     // TODO add your handling code here:
    try{
         saveVisit();
    }catch(Exception e){e.printStackTrace();}
}//GEN-LAST:event_butSaveActionPerformed


    private void saveEncounterOfVistA() throws SQLException{
            Statement statement = null;
            JFrame frame = new JFrame();
            try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            String x1="",y1="",y2="";
            x1=dtpApptDate.getSelectedDate();

            y1=cmbFrmtime.getSelectedItem().toString();
            y2=cmbTotime.getSelectedItem().toString();

                String x01="",x2="",x3="",arrtime,endtime,visitdate;
                x01=txtCheckin.getText();
                x3=txtCheckout.getText();
                arrtime=setTime(x1,x01);
                endtime=setTime(x1,x3);
                visitdate=setTime(x1,"00:00");
            String sn="";
            try{               
                sn=slotNo;
                if(sn.toString().compareTo("")==0){
                   sn=slotNo1;
                }
            }catch(Exception e){sn=slotNo1;}

                String sqlQuery2 = "insert into VISIT(ARRIVAL_TIME,SEEN_TIME,END_TIME,APPOINTMENT_ID,REMARKS,REFERRED_FROM,VISIT_DATE,VISITNO) values ('"+arrtime+"',NULL,'"+endtime+"','"+sn+"','"+txtRemarks.getText()+"','"+cmbReferred.getSelectedItem()+"','"+visitdate+"',Null)";
                statement.executeUpdate(sqlQuery2);

                JOptionPane.showMessageDialog(frame, "Patient visit saved successfully.");
                lblStatus.setText("For new appointment press New Appt");
               
                fgvisit=0;

                butSave.setText("Update");
                flag=0;
                FLAG=0;
            
                
            }catch (Exception e){e.printStackTrace(); fgvisit=0; }
            finally{
                if(statement!=null){statement.close();}
                if(con!=null){con.close();}
            }
    }
    private void saveVisit() throws SQLException{
      
        JFrame frame1 = new JFrame();
        int ddd=0;
        String yCheckin,yCheckout,yEncounter;
        int re=3,end=3,check=3;
        ResultSet rs1=null;
        Statement stm = null;

        int encounterOfVistA=0;
        
        yCheckin=txtCheckin.getText();
        yEncounter=txtEncountertime.getText();
        yCheckout=txtCheckout.getText();

        try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            stm = con.createStatement();
            
            if(yCheckin.compareTo("  :  ")==0){
                JOptionPane.showMessageDialog(null, "Check-in should not be left empty");
                txtCheckin.requestFocus();
                return;
            }

            if(yEncounter.compareTo("  :  ")==0){
                if(this.txtCheckout.getText().compareTo("  :  ")!=0){
                    String sql="select '"+yCheckin+"' <= '"+yCheckout+"' as chk";
                    rs1=stm.executeQuery(sql);
                    while(rs1.next()){
                        check=rs1.getInt("chk");
                    }
                    if(check!=1){
                    JOptionPane.showMessageDialog(null, "Check-out should be less than Check-in!! ");
                    txtCheckout.requestFocus();
                    return;
                    }
                }
                    encounterOfVistA=1;
            }else{
                String sqlQuery01="select '"+yCheckin+"' <= '"+yEncounter+"' as re ;";
                rs1=stm.executeQuery(sqlQuery01);

                while(rs1.next()){
                    re=rs1.getInt("re");
                }

               if(this.txtCheckout.getText().compareTo("  :  ")!=0){
               
                    //===for End time > Seen time===
                    sqlQuery01="select '"+yEncounter+"' < '"+yCheckout+"' as end ;";
                    rs1=stm.executeQuery(sqlQuery01);

                    while(rs1.next()){
                        end=rs1.getInt("end");
                    }

                    if(re!=1)
                    {
                        JOptionPane.showMessageDialog(null, "Check-in should be less than encounter time!! ");
                        txtEncountertime.requestFocus();
                        return;
                    }
                }
                int chkout=0;
                if(yCheckout.compareTo("  :  ")!=0){chkout=1;}
                
                if(end != 1 && chkout==1){
                    JOptionPane.showMessageDialog(null, "Encounter time should be less than Check-out!! ");
                    txtCheckout.requestFocus();
                    return;
                }                
            }
        }catch (Exception e){e.printStackTrace(); }
        finally{
            if(rs1!=null){rs1.close();}
            if(stm!=null){stm.close();}
            if(con!=null){con.close();}
        }
          
        try{
        if(butSave.getText().compareTo("Save")==0)
        {
          //===========SAVE Visit======
          if(encounterOfVistA!=1){
          
            ResultSet resultSetw=null;
            Statement statement = null;
            JFrame frame = new JFrame();
            try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

            String x1="",y1="",y2="";
            x1=dtpApptDate.getSelectedDate();

            y1=cmbFrmtime.getSelectedItem().toString();
            y2=cmbTotime.getSelectedItem().toString();

                String x01="",x2="",x3="",arrtime,seentime,endtime,visitdate;
                x01=txtCheckin.getText();
                x2=txtEncountertime.getText();
                x3=txtCheckout.getText();
                arrtime=setTime(x1,x01);
                seentime=setTime(x1,x2);
                endtime=setTime(x1,x3);
                visitdate=setTime(x1,"00:00");
            String sn="";
            try{
                sn=slotNo;
                if(sn.toString().compareTo("")==0){
                   sn=slotNo1;
                }
            }catch(Exception e){sn=slotNo1;}

            String sqlQueryw="select * from SLOT where SLOT_ID = '"+sn+"' ;" ;
            resultSetw=statement.executeQuery(sqlQueryw);
 
            resultSetw.next();
            String HRN=resultSetw.getString("PATIENT_CODE");

            sqlQueryw="select MAX(VISITNO) as kkk from VISIT a,SLOT b where a.APPOINTMENT_ID=b.SLOT_ID and PATIENT_CODE='"+HRN+"' ;" ;
            resultSetw=statement.executeQuery(sqlQueryw);
            while(resultSetw.next()){
                int rs=0;
                try{
                    rs=resultSetw.getInt("kkk");
                }catch(Exception e){rs=0;}
                ddd=rs+1;
            }
            
                String sqlQuery2 = "insert into VISIT(ARRIVAL_TIME,SEEN_TIME,END_TIME,APPOINTMENT_ID,REMARKS,REFERRED_FROM,VISIT_DATE,VISITNO) values ('"+arrtime+"','"+seentime+"','"+endtime+"','"+sn+"','"+txtRemarks.getText()+"','"+cmbReferred.getSelectedItem()+"','"+visitdate+"','"+ddd+"')";
                statement.executeUpdate(sqlQuery2);
                
                JOptionPane.showMessageDialog(frame, "Patient visit saved successfully.");
                lblStatus.setText("For new appointment press New Appt");

                lblEncounter.setText(""+ddd);
                fgvisit=0;
                butSave.setText("Update");
                flag=0;
                FLAG=0;
                
            }catch (Exception e){e.printStackTrace();fgvisit=0;}
            finally{
                if(resultSetw!=null){resultSetw.close();}
                if(statement!=null){statement.close();}
                if(con!=null){con.close();}
            }
          }else{
              saveEncounterOfVistA();
          }
        }else{

// =========== UPDATE VISIT ======
            
           if(encounterOfVistA!=1){
            Statement statement = null;
            JFrame frame = new JFrame();
            
            try{
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
                statement = con.createStatement();

                String x1="",y1="",y2="",y3="",y4="",y5="",y6="";
                x1=dtpApptDate.getSelectedDate();
                y3=txtCheckin.getText();
                y4=txtEncountertime.getText();
                y5=txtCheckout.getText();
                y6=txtRemarks.getText();

                String sn="";
                try{
                    sn=slotNo;
                    if(sn.toString().compareTo("")==0){
                        sn=slotNo1;
                    }
                }catch(Exception e){sn=slotNo1;}
                
                String updateQuery2 = "update VISIT set ARRIVAL_TIME= '" + setTime(x1,y3) + "'" +" ,SEEN_TIME= "+ "'" + setTime(x1,y4) + "'"+" ,END_TIME= "+ "'" + setTime(x1,y5) + "'" +" ,REMARKS= " + "'" +y6+ "'" +" ,REFERRED_FROM= '" +cmbReferred.getSelectedItem()+"' where APPOINTMENT_ID= '"+sn+"';";

                statement.executeUpdate(updateQuery2);

                fgvisit=0;
                JOptionPane.showMessageDialog(frame, "Patient visit updated successfully.");
                
                }catch (Exception e){e.printStackTrace();}
                finally{
                    if(statement!=null){statement.close();}
                    if(con!=null){con.close();}
                }
        }else{ updateEncounterOfVistA(); }
        }
      }catch(Exception e){ JOptionPane.showMessageDialog(frame1, "Select Doctor first");
       }
        showData(lblHRN.getText());
    }

    private void updateEncounterOfVistA(){
            Statement statement = null;
            JFrame frame = new JFrame();
            try{
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
                statement = con.createStatement();

                String x1="",y1="",y2="",y3="",y5="",y6="";
                x1=dtpApptDate.getSelectedDate();
                y3=txtCheckin.getText();
                y5=txtCheckout.getText();
                y6=txtRemarks.getText();

                String sn="";
                try{
                    sn=slotNo;
                    if(sn.toString().compareTo("")==0){
                        sn=slotNo1;
                    }
                }catch(Exception e){sn=slotNo1;}

//===== Updating Visit =========

                String updateQuery2 = "update VISIT set ARRIVAL_TIME= '" + setTime(x1,y3) + "'" +" ,END_TIME= "+ "'" + setTime(x1,y5) + "'" +" ,REMARKS= " + "'" +y6+ "'" +" ,REFERRED_FROM= '" +cmbReferred.getSelectedItem()+"' where APPOINTMENT_ID= '"+sn+"';";
                statement.executeUpdate(updateQuery2);

                fgvisit=0;
                JOptionPane.showMessageDialog(frame, "Patient visit updated successfully.");
                statement.close();
                con.close();
                }catch (Exception e){e.printStackTrace();}
    }

    private void butNewApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewApptActionPerformed
        // TODO add your handling code here:
        clear();
        flagg=1;
        fgvisit=1;//added fgvisit for new visit
        flagNwApp=1;////added flagNwApp for new book
        cmbFrmtime.setEnabled(true);
        cmbTotime.setEnabled(true);
        tabProvAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date","From Time","To Time","Patient_Name"}));
        dynamicWidthofColumnTabProvAppt();
        cmbProvider.setSelectedIndex(-1);
        cmbReferred.setSelectedIndex(-1);
        butBook.setText("Book");
        butSave.setText("Save");
        ResultSet resultSet1=null;
        Statement statement = null;
        try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();
            String sqlstring1 = " SELECT DATE(Now())as Date; ";
            resultSet1=statement.executeQuery(sqlstring1);

            while(resultSet1.next()){
              String date,b,c,d;
              char ch='a';
              date=resultSet1.getString("Date");
              b=getDate1(date);
              c=getMonth(date);
              d=getYear(date);
              dtpApptDate.setSelectedDate(Integer.parseInt(d),Integer.parseInt(c),Integer.parseInt(b));
            }
            if(lblHRN.getText().compareTo("")==0){
                lblStatus.setText("First select the Patient ...");
            }else if(cmbProvider.getSelectedIndex()==-1){
                lblStatus.setText("To book an appointment select date & Provider ...");
             }
        }catch (Exception e){e.printStackTrace();}
}//GEN-LAST:event_butNewApptActionPerformed

    private void tabPatApptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPatApptMouseClicked
        // TODO add your handling code here:
        
        int i=tabPatAppt.getSelectedRow();        
        String Appt,FromDate,SlotID,Provider,b,c,d;        
        char ch='a';
        
        Appt=tabPatAppt.getValueAt(i,1).toString();
        Provider=tabPatAppt.getValueAt(i,2).toString();
        FromDate=Appt.substring(0,10);

        b=getDate1(FromDate,ch);
        c=getMonth(FromDate,ch);
        d=getYear(FromDate,ch);
        
        dtpApptDate.setSelectedDate(Integer.parseInt(d),Integer.parseInt(b),Integer.parseInt(c));
        cmbProvider.setSelectedItem(Provider);

        String datetime;
        datetime=tabPatAppt.getValueAt(i,1).toString();
        int j1=tabProvAppt.getRowCount();
        for(int i1=0;i1<j1;i1++){
            String Date,Time;            
            String [] temp = null;
            temp = datetime.split(" / ");
            Date=temp[0];
            Time=temp[1];
            
            try{
            if(tabProvAppt.getValueAt(i1,4).toString().compareTo(jLabel9.getText())==0 && tabProvAppt.getValueAt(i1,1).toString().compareTo(Date)==0 && tabProvAppt.getValueAt(i1,2).toString().compareTo(Time)==0)
            {
                tabProvAppt.setRowSelectionInterval(i1,i1);
            }
            }catch(Exception e){e.printStackTrace();}
        }
 
        SlotID=GSlotID[i];
        slotNo=GSlotID[i];
        ResultSet resultSet = null,resultSet1=null,resultSetd=null;
        Statement statement = null;

        int k=0,j=0,force=0,l=0;
        try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();
            cmbReferred.removeAllItems();
             String sqlstring1 = " SELECT * from DOCTOR ";
            resultSet1=statement.executeQuery(sqlstring1);

            while(resultSet1.next()){
              cmbReferred.insertItemAt(resultSet1.getString("DOCTOR_NAME"),j++);
            }
            String sqlstring = "select * from AVAILABILITY a,SLOT b,DOCTOR c," +
                    "JP_PAT_INFO e where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE " +
                    "and c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code=e.HRN " +
                    "and c.DOCTOR_NAME='"+cmbProvider.getSelectedItem()+"' " +
                    "and b.SLOT_ID= '"+SlotID+"';";

            resultSet=statement.executeQuery(sqlstring);
            int count=0;
             while(resultSet.next()){
                    count++;
            }

//For searching value in availability n slot table

         resultSet.first();
         if(count>0){
           do{
               flag=0;

              String String1,String2,slotPeriod="";
              String1=getCodeTime(getTime(resultSet.getString("b.TO_TIME")));
              String2=getCodeTime(getTime(resultSet.getString("b.FROM_TIME")));
              slotPeriod=resultSet.getString("a.SLOT_SIZE");
              
              this.slotPeriod.setSelectedItem(slotPeriod);
              cmbFrmtime.setSelectedItem(String2);
              cmbTotime.setSelectedItem(String1);
              cmbType.setSelectedItem(resultSet.getString("b.BOOKING_TYPE"));
              cmbStatus.setSelectedItem(resultSet.getString("b.STATUS"));
              cmbReferred.setSelectedItem(resultSet.getString("b.REFERRED_FROM"));
              txtComplaint.setText(resultSet.getString("b.REMARKS"));
              butBook.setText("Update");
              flagg=0;

           }while(resultSet.next());
         }
//== For searching value in visit table

            String sqlstringd = "select * from AVAILABILITY a,SLOT b,DOCTOR c,VISIT d,JP_PAT_INFO e where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and d.APPOINTMENT_ID=b.SLOT_ID and c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code=e.HRN and c.DOCTOR_NAME='"+cmbProvider.getSelectedItem()+"' and b.SLOT_ID= '"+SlotID+"';";
            resultSetd=statement.executeQuery(sqlstringd);
            count=0;

            while(resultSetd.next()){
                    count++;
            }
         resultSetd.first();
         if(count>0){
           do{
               force++;
                flag=0;

              String String3,String4,String5;
              String3=getCodeTime(getTime(resultSetd.getString("d.ARRIVAL_TIME")));
              if(resultSetd.getString("d.SEEN_TIME")!=null){
                String4=getCodeTime(getTime(resultSetd.getString("d.SEEN_TIME")));
                txtEncountertime.setText(String4);
              }

              String5=getCodeTime(getTime(resultSetd.getString("d.END_TIME")));
              lblEncounter.setText(resultSetd.getString("d.VISITNO"));
              txtCheckin.setText(String3);              
              txtCheckout.setText(String5);
              txtRemarks.setText(resultSetd.getString("d.REMARKS"));
              butSave.setText("Update");
              fgvisit=0;
              
              }while(resultSetd.next());
        }

            if(force==0)
            {
              butSave.setText("Save");
              txtCheckin.requestFocus();
              flag=1;
              flagg=1;
              fgvisit=1;
            }

            apptEncountStatus();

        }catch (Exception e){e.printStackTrace();}
        finally{
           try{
                if(resultSet!=null){resultSet.close();}
                if(resultSet1!=null){resultSet1.close();}
                if(resultSetd!=null){resultSetd.close();}
                if(statement!=null){statement.close();}
                if(con!=null){con.close();}
           }catch(Exception e){e.printStackTrace();}
        }
        
        flagNwApp=0;
        cmbFrmtime.setEnabled(false);
        cmbTotime.setEnabled(false);
}//GEN-LAST:event_tabPatApptMouseClicked

    private void butNewRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewRegActionPerformed
        // TODO add your handling code here:
        PatientList.globalhrn="";
        PatientRegistation pm=new PatientRegistation();
}//GEN-LAST:event_butNewRegActionPerformed

    private void butBookKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_butBookKeyPressed
        // TODO add your handling code here:
    try{
        if(evt.getKeyCode()==10 ){
          saveBook();
        }
    }catch(Exception e){e.printStackTrace();}
}//GEN-LAST:event_butBookKeyPressed

    private void butSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_butSaveKeyPressed
        // TODO add your handling code here:
     try{
         saveVisit();
    }catch(Exception e){e.printStackTrace();}
}//GEN-LAST:event_butSaveKeyPressed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        // TODO add your handling code here:
         if(cmbStatus.getSelectedItem().toString().compareTo("Rescheduled")==0){
             cmbFrmtime.setEnabled(true);
             cmbTotime.setEnabled(true);
             cmbFrmtime.removeAllItems();
             slotPeriod.setSelectedItem("15");
             insertFromTotime(Integer.parseInt(slotPeriod.getSelectedItem().toString()),0);
             cmbFrmtime.setSelectedIndex(0);
             butBook.setText("Book");
             slotPeriod.requestFocus();
        }
}//GEN-LAST:event_cmbStatusActionPerformed

    private void slotPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slotPeriodActionPerformed
        // TODO add your handling code here:
        cmbFrmtime.removeAllItems();
        insertFromTotime(Integer.parseInt(slotPeriod.getSelectedItem().toString()),0);
        cmbFrmtime.setSelectedIndex(0);
        cmbProvider.requestFocus();
}//GEN-LAST:event_slotPeriodActionPerformed

    private void cmbFrmtimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFrmtimeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cmbFrmtimeActionPerformed

    private void cmbFrmtimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbFrmtimeFocusLost
        // TODO add your handling code here:
        cmbTotime.setSelectedItem(insertToAccFrom(cmbFrmtime.getSelectedItem().toString()));
        txtComplaint.requestFocus();
}//GEN-LAST:event_cmbFrmtimeFocusLost

    private void butBookFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_butBookFocusLost
        // TODO add your handling code here:
        txtCheckin.requestFocus();
}//GEN-LAST:event_butBookFocusLost

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    try{
        if(this.getDefaultCloseOperation()==MDI.defaultWindowClose){
            MDI.basicAppointment=null;
        }
    }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_formWindowClosed

    private void txtComplaintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComplaintKeyPressed
        // TODO add your handling code here:
    if(evt.getKeyCode()==9){           
            butBook.requestFocus();
            evt.consume();
        }      
}//GEN-LAST:event_txtComplaintKeyPressed

    private void txtRemarksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRemarksKeyPressed
        // TODO add your handling code here:
    if(evt.getKeyCode()==9){
            butSave.requestFocus();
            evt.consume();
        }     
}//GEN-LAST:event_txtRemarksKeyPressed
   
    public void showData(String a) throws SQLException
    {
        String ress="",dc="";
        ResultSet resultSet = null,resultSet1=null,resultSetd=null;
        Statement statement = null,statement1 = null;
        String[][] m = new String[100][4];
        int k = 0;
        try{
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con =  DriverManager.getConnection("jdbc:mysql://"+sip+":"+sport+"/"+dbname,uname, passwd);
            statement = con.createStatement();

//==== For appt date n provider====
            
            String sqlstring = "select * from AVAILABILITY a,SLOT b,DOCTOR c " +
                    "where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and " +
                    "c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code = '"+a+
                    "' and b.STATUS not in ('Cancelled','Rescheduled') order by a.DATE desc,b.FROM_TIME ;";
           resultSet=statement.executeQuery(sqlstring);
                  
            while(resultSet.next()){

              String String1,String2;
              String1=getDate(resultSet.getString("a.DATE"));
              String2=getTime(resultSet.getString("b.FROM_TIME"));

                m[k][0] = ""+(k+1);
                m[k][1] = Utiles.convertMysqlDatetoUSFormat(String1)+" / "+String2;
                m[k][2] = resultSet.getString("c.DOCTOR_NAME");
                GSlotID[k]=resultSet.getString("b.SLOT_ID");

                //For visit No.
                
                try{
                    statement1 = con.createStatement();
                    String sqlstringd = "select * from VISIT where APPOINTMENT_ID= '"+resultSet.getString("b.SLOT_ID")+"';";
                    resultSetd=statement1.executeQuery(sqlstringd);
                    resultSetd.next();
                    m[k][3] = resultSetd.getString("VISITNO");
                    resultSetd.close();
                    statement1.close();
                }catch(Exception e){m[k][3] ="";}
                
                ress=ress+m[k][0]+"\t"+m[k][1]+"\t"+m[k][2]+"\t"+"GSlotID[k]"+GSlotID[k]+"\n";
                k++;
              }

              String sqlstring1 = "select count(*)  as Count from AVAILABILITY a,SLOT b,DOCTOR c" +
                      " where b.AVAILABLE_CODE=a.AVAILABLE_UNIQUE_CODE and " +
                      "c.DOCTOR_CODE=a.DOCTOR_CODE and b.patient_code = '"+a+
                      "' and b.STATUS not in ('Cancelled','Rescheduled') ;";
              resultSet1=statement.executeQuery(sqlstring1);

            while(resultSet1.next()){
                dc=resultSet1.getString("Count");
            }

        }catch (Exception e){e.printStackTrace();}
        finally{
            
            if(resultSet!=null){resultSet.close();}
            if(resultSet1!=null){resultSet1.close();}
            if(statement!=null){statement.close();}
            if(con!=null){con.close();}
        }

        if(dc.compareTo("0")==0){
            
            FLAG=1;//used to see whether the patient has appt or not
            JOptionPane.showMessageDialog(null, "Patient has no Appointments");
            tabPatAppt.setModel(new javax.swing.table.DefaultTableModel(null,new String[]{"SNo","Appointment Date/Time","Provider","Visit No."}));
            dynamicWidthofColumnTabPatAppt();

        }else{
            String[][] arr=new String[k][4];
            ress="";

            for(int q=0;q<k;q++)
            {
            arr[q][0]=m[q][0];
            arr[q][1]=m[q][1];
            arr[q][2]=m[q][2];
            arr[q][3]=m[q][3];
            }
            tabPatAppt.setModel(new javax.swing.table.DefaultTableModel(arr,new String[]{"SNo","Appointment Date/Time","Provider","Visit No."}
            )
                   {
                       boolean[] canEdit = new boolean [] {
                              false, false,false, false
                       };
                       public boolean isCellEditable(int rowIndex, int columnIndex) {
                               return canEdit [columnIndex];
                       }
                       }
                    );
                    dynamicWidthofColumnTabPatAppt();
        }
    }

     private void clear(){
        slotPeriod.setSelectedItem("15");
        cmbType.setSelectedItem("New");
        cmbStatus.setSelectedItem("Open");
        cmbReferred.setSelectedIndex(-1);
        txtComplaint.setText("");
        lblEncounter.setText("");
        txtCheckin.setText("");
        txtEncountertime.setText("");
        txtCheckout.setText("");
        txtRemarks.setText("");
    }
    
    private static void connect_Setting(String which)
    {
       GetSystemConfig ob=new GetSystemConfig();
       dbname=ob.getDbName(which);
       sip=ob.getDbIp(which);
       sport=ob.getDbPort(which);
       uname=ob.getUserName(which);
       passwd=ob.getPassword(which);
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new BasicAppointment().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(BasicAppointment.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton butBook;
    public javax.swing.JButton butNewAppt;
    public javax.swing.JButton butNewReg;
    public javax.swing.JButton butSave;
    public javax.swing.JButton butSearch;
    public javax.swing.JComboBox cmbFrmtime;
    public javax.swing.JComboBox cmbProvider;
    public javax.swing.JComboBox cmbReferred;
    public javax.swing.JComboBox cmbStatus;
    public javax.swing.JComboBox cmbTotime;
    public javax.swing.JComboBox cmbType;
    public org.gui.JCalendarCombo dtpApptDate;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel15;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    public javax.swing.JLabel jLabel18;
    public javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel20;
    public javax.swing.JLabel jLabel21;
    public javax.swing.JLabel jLabel22;
    public javax.swing.JLabel jLabel24;
    public javax.swing.JLabel jLabel25;
    public javax.swing.JLabel jLabel26;
    public javax.swing.JLabel jLabel27;
    public javax.swing.JLabel jLabel28;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTextField lblEncounter;
    public javax.swing.JLabel lblHRN;
    public javax.swing.JLabel lblStatus;
    public javax.swing.JComboBox slotPeriod;
    public javax.swing.JTable tabPatAppt;
    public javax.swing.JTable tabProvAppt;
    public javax.swing.JFormattedTextField txtCheckin;
    public javax.swing.JFormattedTextField txtCheckout;
    public javax.swing.JTextArea txtComplaint;
    public javax.swing.JFormattedTextField txtEncountertime;
    public javax.swing.JTextArea txtRemarks;
    // End of variables declaration//GEN-END:variables

}
